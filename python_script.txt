import os
import base64
import json
import re
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
import psycopg2
import mysql.connector

credentials_file = 'credentials.json'
token_file = 'token.json'
api_service_name = 'gmail'
api_version = 'v1'
scopes = ['https://www.googleapis.com/auth/gmail.readonly']

db_type = 'postgresql'  # Choose 'postgresql' or 'mysql'
db_host = 'localhost'
db_name = 'email_db'
db_user = 'your_username'
db_password = 'your_password'

rule_file = 'rules.json'

def authenticate_gmail_api():
    creds = None

    if os.path.exists(token_file):
        creds = Credentials.from_authorized_user_file(token_file, scopes)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(credentials_file, scopes)
            creds = flow.run_local_server(port=0)

        # Save the credentials for the next run
        with open(token_file, 'w') as token:
            token.write(creds.to_json())

    service = build(api_service_name, api_version, credentials=creds)
    return service

def create_db_connection():
    if db_type == 'postgresql':
        return psycopg2.connect(host=db_host, database=db_name, user=db_user, password=db_password)
    elif db_type == 'mysql':
        return mysql.connector.connect(host=db_host, database=db_name, user=db_user, password=db_password)
    else:
        raise ValueError(f"Unsupported database type: {db_type}")

def create_email_table(connection):
    cursor = connection.cursor()

    if db_type == 'postgresql':
        cursor.execute("CREATE TABLE IF NOT EXISTS emails (id SERIAL PRIMARY KEY, subject TEXT, sender TEXT, body TEXT)")
    elif db_type == 'mysql':
        cursor.execute("CREATE TABLE IF NOT EXISTS emails (id INT AUTO_INCREMENT PRIMARY KEY, subject TEXT, sender TEXT, body TEXT)")

    connection.commit()
    cursor.close()

def insert_email(connection, email):
    cursor = connection.cursor()

    if db_type == 'postgresql':
        cursor.execute("INSERT INTO emails (subject, sender, body) VALUES (%s, %s, %s)",
                       (email['subject'], email['from'], email['body']))
    elif db_type == 'mysql':
        cursor.execute("INSERT INTO emails (subject, sender, body) VALUES (%s, %s, %s)",
                       (email['subject'], email['from'], email['body']))

    connection.commit()
    cursor.close()

def fetch_and_store_emails():
    service = authenticate_gmail_api()
    connection = create_db_connection()
    create_email_table(connection)

    results = service.users().messages().list(userId='me', labelIds=['INBOX']).execute()
    messages = results.get('messages', [])

    if not messages:
        print('No new messages.')
        return

    for message in messages:
        email = get_email_content(service, message)

        if email:
            insert_email(connection, email)
            print(f"Stored email with subject '{email['subject']}' in the database.")

    connection.close()

def get_email_content(service, message):
    email_data = service.users().messages().get(userId='me', id=message['id'], format='full').execute()
    payload = email_data['payload']
    headers = payload['headers']
    parts = payload.get('parts', [])
    body = None

    for part in parts:
        if 'data' in part['body']:
            body = part['body']['data']
            break

    if not body:
        return None

    body = base64.urlsafe_b64decode(body).decode('utf-8')

    return {
        'subject': get_header(headers, 'Subject'),
        'from': get_header(headers, 'From'),
        'body': body
    }

def get_header(headers, name):
    for header in headers:
        if header['name'] == name:
            return header['value']
    return None

def process_emails():
    connection = create_db_connection()
    cursor = connection.cursor()

    # Load rules from JSON file
    with open(rule_file) as f:
        rules = json.load(f)

    # Fetch emails from the database
    cursor.execute("SELECT id, subject, sender, body FROM emails")
    emails = cursor.fetchall()

    if not emails:
        print('No emails found in the database.')
        return

    for email in emails:
        email_dict = {
            'id': email[0],
            'subject': email[1],
            'sender': email[2],
            'body': email[3]
        }

        # Process email based on rules
        for rule in rules:
            if evaluate_conditions(rule['conditions'], email_dict):
                perform_actions(rule['actions'], email_dict)

    cursor.close()
    connection.close()

def evaluate_conditions(conditions, email_dict):
    for condition in conditions:
        if condition['field'] == 'subject':
            if not re.search(condition['value'], email_dict['subject'], re.IGNORECASE):
                return False
        elif condition['field'] == 'sender':
            if not re.search(condition['value'], email_dict['sender'], re.IGNORECASE):
                return False
        elif condition['field'] == 'body':
            if not re.search(condition['value'], email_dict['body'], re.IGNORECASE):
                return False
        else:
            return False
    
    return True

def perform_actions(actions, email_dict):
    for action in actions:
        if action['action'] == 'print':
            print(f"Email with subject '{email_dict['subject']}' matches the rule and action: Print.")
        elif action['action'] == 'mark_important':
            print(f"Email with subject '{email_dict['subject']}' matches the rule and action: Mark as Important.")
        elif action['action'] == 'delete':
            print(f"Email with subject '{email_dict['subject']}' matches the rule and action: Delete.")

fetch_and_store_emails()
process_emails()
